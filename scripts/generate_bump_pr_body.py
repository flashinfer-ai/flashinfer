#!/usr/bin/env python3
"""Generate PR body for version bump pull requests."""

import argparse
import sys
from pathlib import Path


def read_file_safe(filepath: Path) -> str:
    """Read file contents safely, returning empty string if file doesn't exist."""
    try:
        return filepath.read_text().strip()
    except FileNotFoundError:
        return ""


def generate_pr_body(
    current_version: str,
    new_version: str,
    bump_type: str,
    ai_provider: str = None,
    reasoning_file: Path = None,
    key_changes_file: Path = None,
    run_id: str = None,
) -> str:
    """Generate the PR body markdown text.

    Args:
        current_version: Current version string (e.g., "2.1.4")
        new_version: New version string (e.g., "2.2.0")
        bump_type: Type of version bump ("major", "minor", "patch")
        ai_provider: Optional AI provider name used for analysis
        reasoning_file: Optional path to file containing AI reasoning
        key_changes_file: Optional path to file containing key changes (one per line)
        run_id: Optional GitHub Actions run ID

    Returns:
        Formatted PR body as markdown string
    """
    bump_type_upper = bump_type.upper()

    # Build AI provider text
    ai_provider_text = f" (using {ai_provider})" if ai_provider else ""

    # Read reasoning
    reasoning = "Manual version bump"
    if reasoning_file:
        reasoning = read_file_safe(reasoning_file) or reasoning

    # Start building PR body
    lines = [
        f"## Version Bump: v{current_version} -> v{new_version}",
        "",
        f"This PR bumps the version from **v{current_version}** to **v{new_version}** ({bump_type_upper} bump).",
        "",
        f"### AI Analysis{ai_provider_text}",
        "",
        reasoning,
        "",
    ]

    # Add key changes if available
    if key_changes_file:
        key_changes_text = read_file_safe(key_changes_file)
        if key_changes_text:
            lines.extend(
                [
                    "### Key Changes",
                    "",
                ]
            )
            for change in key_changes_text.split("\n"):
                change = change.strip()
                if change:
                    lines.append(f"- {change}")
            lines.append("")

    # Add semantic versioning rules
    lines.extend(
        [
            "### Semantic Versioning Rules",
            "",
            "According to our [CONTRIBUTING.md](../blob/main/CONTRIBUTING.md):",
            "",
            "- **Major**: Incompatible API changes",
            "- **Minor**: Added functionality that is backwards-compatible",
            "- **Patch**: Backwards-compatible bug fixes",
            "",
            "### Next Steps",
            "",
            "After merging this PR:",
            "- The [auto-tag-and-release workflow](../actions/workflows/auto-tag-and-release.yml) will automatically:",
            f"  1. Create git tag `v{new_version}` on the main branch",
            "  2. Trigger the [release workflow](../actions/workflows/release.yml) to build and publish the release",
            "",
            "---",
            "",
        ]
    )

    # Add auto-generated footer
    if run_id:
        lines.append(
            f"ðŸ¤– Auto-generated by [bump-version workflow](../actions/runs/{run_id})"
        )
    else:
        lines.append("ðŸ¤– Auto-generated by bump-version workflow")

    return "\n".join(lines)


def main():
    parser = argparse.ArgumentParser(
        description="Generate PR body for version bump pull requests"
    )
    parser.add_argument(
        "--current-version", required=True, help="Current version (e.g., 2.1.4)"
    )
    parser.add_argument(
        "--new-version", required=True, help="New version (e.g., 2.2.0)"
    )
    parser.add_argument(
        "--bump-type",
        required=True,
        choices=["major", "minor", "patch"],
        help="Type of version bump",
    )
    parser.add_argument(
        "--ai-provider", help="AI provider used for analysis (optional)"
    )
    parser.add_argument(
        "--reasoning-file", type=Path, help="Path to file containing AI reasoning"
    )
    parser.add_argument(
        "--key-changes-file",
        type=Path,
        help="Path to file containing key changes (one per line)",
    )
    parser.add_argument("--run-id", help="GitHub Actions run ID")
    parser.add_argument(
        "--output", type=Path, help="Output file path (default: stdout)"
    )

    args = parser.parse_args()

    # Generate PR body
    pr_body = generate_pr_body(
        current_version=args.current_version,
        new_version=args.new_version,
        bump_type=args.bump_type,
        ai_provider=args.ai_provider,
        reasoning_file=args.reasoning_file,
        key_changes_file=args.key_changes_file,
        run_id=args.run_id,
    )

    # Write output
    if args.output:
        args.output.write_text(pr_body)
        print(f"PR body written to {args.output}", file=sys.stderr)
    else:
        print(pr_body)

    return 0


if __name__ == "__main__":
    sys.exit(main())
