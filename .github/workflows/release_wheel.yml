# Adapted from https://github.com/punica-ai/punica/blob/591b59899f0a20760821785d06b331c8a2e5cb86/.github/workflows/release_wheel.yml
name: Release
on:
  workflow_dispatch:
    inputs:
      tag_name:
        required: true
        type: string
  workflow_call:
    inputs:
      tag_name:
        required: true
        type: string
    secrets:
      WHL_TOKEN:
        required: true
      # PYPI_TEST_TOKEN:
      #   required: true

env:
  TORCH_CUDA_ARCH_LIST: "7.5 8.0 8.9 9.0+PTX"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        cuda: ["11.8", "12.1", "12.4", "12.6"]
        torch: ["2.4", "2.5", "2.6"]
        exclude: # We use release_wheel_sglang.yml for faster release and verification. If everything is okay, then we trigger release_wheel.yml. This combination (cuda 12.4 or 11.8 + torch 2.5) is already handled in release_wheel_sglang.yml
          - cuda: "12.4"
            torch: "2.5"
          - cuda: "11.8"
            torch: "2.5"
          - cuda: "12.1"
            torch: "2.6"
          - cuda: "12.6"
            torch: "2.4"
          - cuda: "12.6"
            torch: "2.5"


    runs-on: [self-hosted]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set torch and cuda version value
        id: set_torch_and_cuda_version
        run: |
          IFS='.' read -r major minor <<< "${{ matrix.torch }}"
          version_value=$((major * 100 + minor))
          echo "TORCH_VERSION=$version_value" >> $GITHUB_OUTPUT
          IFS='.' read -r major minor <<< "${{ matrix.cuda }}"
          version_value=$((major * 100 + minor))
          echo "CUDA_VERSION=$version_value" >> $GITHUB_OUTPUT

      - name: Build wheel
        env:
          TORCH_VERSION: ${{ steps.set_torch_and_cuda_version.outputs.TORCH_VERSION }}
          CUDA_VERSION: ${{ steps.set_torch_and_cuda_version.outputs.CUDA_VERSION }}
          BUILDER_IMAGE: ${{ ((steps.set_torch_and_cuda_version.outputs.TORCH_VERSION == 206 && steps.set_torch_and_cuda_version.outputs.CUDA_VERSION >= 1206) || steps.set_torch_and_cuda_version.outputs.TORCH_VERSION > 206) && 'pytorch/manylinux2_28-builder:cuda' || 'pytorch/manylinux-builder:cuda' }}${{ matrix.cuda }}
        run: |
          echo "TORCH_VERSION: $TORCH_VERSION"
          echo "CUDA_VERSION: $CUDA_VERSION"
          echo "BUILDER_IMAGE: $BUILDER_IMAGE"
          chown -R $CI_UID:$CI_GID "$GITHUB_WORKSPACE"
          docker run --rm -t \
              -v "$CI_RUNNER_CACHE_DIR":/ci-cache \
              -v "$GITHUB_WORKSPACE":/app \
              -e FLASHINFER_CI_CACHE=/ci-cache \
              -e FLASHINFER_CI_CUDA_VERSION=${{ matrix.cuda }} \
              -e FLASHINFER_CI_TORCH_VERSION=${{ matrix.torch }} \
              -e FLASHINFER_CI_PYTHON_VERSION=3.10 \
              -e TORCH_CUDA_ARCH_LIST="$TORCH_CUDA_ARCH_LIST" \
              -e MAX_JOBS=128 \
              --user $CI_UID:$CI_GID \
              $BUILDER_IMAGE \
              bash /app/scripts/run-ci-build-wheel.sh
        timeout-minutes: 120
      - run: du -h dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: wheel-cuda${{ matrix.cuda }}-torch${{ matrix.torch }}
          path: dist/*

  release:
    needs: build
    runs-on: [self-hosted]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true
          pattern: wheel-*

      - run: ls -lah dist/

      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.tag_name }}
          files: |
            dist/flashinfer*.whl

      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.tag_name }}
          files: |
            dist/flashinfer-*.tar.gz

      - name: Clone wheel index
        run: git clone https://oauth2:${WHL_TOKEN}@github.com/flashinfer-ai/whl.git flashinfer-whl
        env:
          WHL_TOKEN: ${{ secrets.WHL_TOKEN }}

      - name: Update wheel index
        run: python3 scripts/update_whl_index.py

      - name: Push wheel index
        run: |
          cd flashinfer-whl
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "update whl"
          git push

      # - name: Upload sdist to pypi
      #   run: |
      #     pip install twine
      #     python -m twine upload --repository testpypi --username=__token__ dist/*.tar.gz
      #   env:
      #     TWINE_PASSWORD: ${{ secrets.PYPI_TEST_TOKEN }}
