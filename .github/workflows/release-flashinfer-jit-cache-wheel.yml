name: Build and Release flashinfer-jit-cache wheels

on:
    workflow_dispatch:
      inputs:
        tag:
          description: 'Tag (e.g., v1.2.3) to build wheels for'
          required: true
          type: string

jobs:
    validate-tag:
      runs-on: ubuntu-latest
      steps:
        - name: Validate tag format
          run: |
            if [[ ! "${{ inputs.tag }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+([a-z0-9]+)?$ ]]; then
              echo "Error: Tag '${{ inputs.tag }}' does not match the expected format (e.g., v1.2.3 or v1.2.3.post1 or v1.2.3rc1)"
              exit 1
            fi
            echo "✓ Tag format is valid: ${{ inputs.tag }}"

        - name: Check out tag
          uses: actions/checkout@v4
          with:
            ref: ${{ inputs.tag }}
            submodules: true

        - name: Verify tag matches version.txt
          run: |
            # Extract version from tag (remove 'v' prefix)
            TAG_VERSION="${{ inputs.tag }}"
            TAG_VERSION="${TAG_VERSION#v}"

            # Check version.txt - this is the source of truth
            if [ ! -f "version.txt" ]; then
              echo "Error: version.txt file not found!"
              exit 1
            fi

            VERSION_TXT=$(cat version.txt | tr -d '[:space:]')

            if [ "$TAG_VERSION" != "$VERSION_TXT" ]; then
              echo "❌ CRITICAL ERROR: version.txt does not match tag!"
              echo "  Tag version: $TAG_VERSION"
              echo "  version.txt: $VERSION_TXT"
              echo ""
              echo "Please update version.txt to match the release version before creating a release."
              echo "The tag should be 'v$VERSION_TXT' (e.g., if version.txt contains '1.2.3', tag should be 'v1.2.3')"
              exit 1
            fi

            echo "✓ version.txt matches tag version: $VERSION_TXT"

    build-wheel:
        needs: validate-tag
        strategy:
            fail-fast: false
            matrix:
                cuda: ["12.8", "12.9", "13.0"]
                arch: ['x86_64', 'aarch64']

        # Use self-hosted runners with specific labels based on architecture
        runs-on: [self-hosted, "${{ matrix.arch == 'aarch64' && 'arm64' || matrix.arch }}"]

        steps:
            - name: Display Machine Information
              run: |
                echo "CPU: $(nproc) cores, $(lscpu | grep 'Model name' | cut -d':' -f2 | xargs)"
                echo "RAM: $(free -h | awk '/^Mem:/ {print $7 " available out of " $2}')"
                echo "Disk: $(df -h / | awk 'NR==2 {print $4 " available out of " $2}')"
                echo "Architecture: $(uname -m)"
            - uses: actions/checkout@v4
              with:
                  ref: ${{ inputs.tag }}
                  submodules: true

            - name: Build wheel in container
              env:
                  DOCKER_IMAGE: ${{ matrix.arch == 'aarch64' && format('pytorch/manylinuxaarch64-builder:cuda{0}', matrix.cuda) || format('pytorch/manylinux2_28-builder:cuda{0}', matrix.cuda) }}
                  FLASHINFER_CUDA_ARCH_LIST: ${{ matrix.cuda == '12.8' && '7.5 8.0 8.9 9.0a 10.0a 12.0a' || '7.5 8.0 8.9 9.0a 10.0a 10.3a 12.0a' }}
              run: |
                  # Extract CUDA major and minor versions
                  CUDA_MAJOR=$(echo "${{ matrix.cuda }}" | cut -d'.' -f1)
                  CUDA_MINOR=$(echo "${{ matrix.cuda }}" | cut -d'.' -f2)
                  export CUDA_MAJOR
                  export CUDA_MINOR
                  export CUDA_VERSION_SUFFIX="cu${CUDA_MAJOR}${CUDA_MINOR}"

                  chown -R $(id -u):$(id -g) ${{ github.workspace }}
                  mkdir -p ${{ github.workspace }}/ci-cache
                  chown -R $(id -u):$(id -g) ${{ github.workspace }}/ci-cache

                  # Run the build script inside the container with proper mounts
                  docker run --rm \
                    -v ${{ github.workspace }}:/workspace \
                    -v ${{ github.workspace }}/ci-cache:/ci-cache \
                    -e FLASHINFER_CI_CACHE=/ci-cache \
                    -e CUDA_VERSION="${{ matrix.cuda }}" \
                    -e CUDA_MAJOR="$CUDA_MAJOR" \
                    -e CUDA_MINOR="$CUDA_MINOR" \
                    -e CUDA_VERSION_SUFFIX="$CUDA_VERSION_SUFFIX" \
                    -e ARCH="${{ matrix.arch }}" \
                    -e FLASHINFER_CUDA_ARCH_LIST="${FLASHINFER_CUDA_ARCH_LIST}" \
                    --user $(id -u):$(id -g) \
                    -w /workspace \
                    ${{ env.DOCKER_IMAGE }} \
                    bash /workspace/scripts/build_flashinfer_jit_cache_whl.sh
              timeout-minutes: 180

            - name: Display wheel size
              run: du -h flashinfer-jit-cache/dist/*

            - name: Create artifact name
              id: artifact-name
              run: |
                  CUDA_NO_DOT=$(echo "${{ matrix.cuda }}" | tr -d '.')
                  echo "name=wheel-cu${CUDA_NO_DOT}-${{ matrix.arch }}" >> $GITHUB_OUTPUT

            - uses: actions/upload-artifact@v4
              with:
                  name: ${{ steps.artifact-name.outputs.name }}
                  retention-days: 7
                  path: flashinfer-jit-cache/dist/*
